
options {
    DEBUG_PARSER = false;
    DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(SemantaxParser)
package com.semantax.parser.generated;

import java.util.Iterator;
import java.util.Optional;
import java.util.function.Predicate;

import com.semantax.ast.factory.*;
import com.semantax.ast.node.*;
import com.semantax.ast.node.list.*;
import com.semantax.ast.node.literal.*;
import com.semantax.ast.node.literal.type.*;
import com.semantax.ast.node.pattern.PatternDefinition;
import com.semantax.ast.node.progcall.ProgCall;
import com.semantax.ast.util.FilePos;
import com.semantax.phase.grammar.*;

import java.lang.reflect.Field;

@SuppressWarnings("unchecked")
public class SemantaxParser {

    private final LookaheadUtil lookaheadUtil = new LookaheadUtil(this);

    public Iterator<Token> iterateTokens() {
          return new Iterator<Token>() {

              private Token curr = token;

              @Override
              public boolean hasNext() {
                  if (curr.next == null) {
                      curr.next = token_source.getNextToken();
                  }
                  return token.next != null;
              }

              @Override
              public Token next() {
                  curr = curr.next;
                  return curr;
              }
          };
    }
}

PARSER_END(SemantaxParser)

SKIP: {
    " " | "\t " | "\n" | "\r"
}

// symbols
TOKEN : {
    < AT: "@" >
    |
    < DOLLAR: "$" >
    |
    < L_PAREN: "(" >
    |
    < R_PAREN: ")" >
    |
    < L_BRACE: "{" >
    |
    < R_BRACE: "}" >
    |
    < L_BRACKET: "[" >
    |
    < R_BRACKET: "]" >
    |
    < SEMI_COLON: ";" >
    |
    < COLON: ":" >
    |
    < DOUBLE_QUOTE: "\"" >
    |
    < SINGLE_QUOTE: "'" >
    |
    < COMMA: "," >
    |
    < ARROW: "->" >
    |
    < SYMBOL: ["!","#","%","&","*","+","-",".","/","<"-"?","^","-","`","|","~"] > // Symbols other than ' " , $ ( ) { } [ ] :
}

// type literals
TOKEN: {
    < TYPE: "type" >
    |
    < INT: "int" >
    |
    < STRING: "string" >
    |
    < BOOL: "bool" >
    |
    < ARRAY: "array" >
    |
    < RECORD: "record" >
    |
    < FUNC: "func" >
}

// keywords
TOKEN: {
    < MODULE: "module" >
    |
    < MODULE_MODIFIER: "public" | "main" >
    |
    < USES: "uses" >
}

// int literals
TOKEN: {
    < DECIMAL_LIT: (["0"-"9"])+ >
    |
    < DOZENAL_LIT: "0d" (["0"-"9", "x", "X", "e", "E"])+ >
}

// bool literals
TOKEN: {
    < TRUE: "true" >
    |
    < FALSE: "false" >
}

// string literals
TOKEN: {
    // A string lit is any escaped character, or anything other than a " or \
    <DOUBLE_QUOTED_STRING: "\"" ("\\" ~[] | ~["\"", "\\"])* "\"" >
    |
    <SINGLE_QUOTED_STRING: "'" ("\\" ~[] | ~["'", "\\"])* "'" >
}


// word
TOKEN: {
    < WORD: <LETTER> (<LETTER> | <DIGIT>)* >
    |
    < #LETTER: ["a"-"z", "A"-"Z"] >
    |
    < #DIGIT: ["0"-"9"] >
}


/** Root production. */
Program Program() :
{
    Module module;
    ModuleList modules = new ModuleList();
}
{
  (module = ModuleDefinition()
    {modules.add(module);}
  )* <EOF>
  {return new Program(modules);}
}

Module ModuleDefinition() :
{
    Token t;
    Word moduleName;
    WordList uses;
    Module subModule;
    ModuleList subModules = new ModuleList();
    Statement statement;
    StatementList statements = new StatementList();
    PatternDefinition pattern;
    PatternDefinitionList patterns = new PatternDefinitionList();
    Module.Builder moduleBuilder = Module.builder();
}
{
    [t = <MODULE_MODIFIER>
     {moduleBuilder.modifier(Module.Modifier.of(t));}
    ]
    <MODULE>
    moduleName = Word()
    {moduleBuilder.name(moduleName.getValue());}
    [uses = UsesClause()
     {moduleBuilder.modulesUsed(uses);}
    ]
    <L_BRACE>
    (subModule = ModuleDefinition()
     {subModules.add(subModule);}
     |
     statement = Statement()
     {statements.add(statement);}
     |
     pattern = PatternDef()
     {patterns.add(pattern);}
    )*
    {moduleBuilder.subModules(subModules);
     moduleBuilder.statements(statements);
     moduleBuilder.patterns(patterns);}
    <R_BRACE>
    {Module module = moduleBuilder.build();
     module.setFilePos(moduleName.getFilePos());
     return module;}
}

WordList UsesClause() :
{
    WordList wordList;
}
{
    <USES>
    wordList = CommaDelimitedWordList()
    {return wordList;}
}

// list of one or more words separated by commas
WordList CommaDelimitedWordList() :
{
    Word word;
    WordList words = new WordList();
}
{
    word = Word()
    {words.add(word);
     words.setFilePos(word.getFilePos());}
    (<COMMA> word = Word()
     {words.add(word);}
    )*
    {return words;}
}

// list of two or more words separated by whitespace
WordList PatternWordSymbolList() :
{
    Word word;
    WordList words = new WordList();
}
{
    (word = Word()
     |
     word = PatternSymbol())
    {words.add(word);}
    ((word = Word()
     |
     word = PatternSymbol())
     {words.add(word);}
    )+
    {return words;}
}

Word Word() :
{
    Token t;
}
{
    t = <WORD>
    {return WordFactory.fromToken(t);}
}

Word PatternSymbol() :
{
    Word word;
}
{
    // [] and : are not included in the symbol token, since they are tokens in thier own right
    (word = PhraseSymbol()
    |
    word = RBracket(LookaheadUtil.BracketConsumer.PATTERN)
    |
    word = LBracket(LookaheadUtil.BracketConsumer.PATTERN)
    )
    {return word;}
}

Word PhraseSymbol() :
{
    Token t;
}
{
    t = <SYMBOL>
    {return Word.fromToken(t);}
}


Word LBracket(LookaheadUtil.BracketConsumer consumer) :
{
    Token t;
}
{
    t = <L_BRACKET>
    {lookaheadUtil.consumedLBracket(consumer);
     return Word.fromToken(t);}
}

Word RBracket(LookaheadUtil.BracketConsumer consumer) :
{
    Token t;
}
{
    t = <R_BRACKET>
    {lookaheadUtil.consumedRBracket(consumer);
     return Word.fromToken(t);}
}


Statement Statement() :
{
    Phrase phrase;
}
{
    phrase = Phrase() <SEMI_COLON>
    {return StatementFactory.fromPhrase(phrase);}
}

Phrase Phrase() :
{
    PhraseElement element;
    Phrase.Builder builder = Phrase.builder();
}
{

    (LOOKAHEAD({!lookaheadUtil.isEndOfPhrase()})
    element = PhraseElement()
     {builder.element(element);})+

    {return builder.build();}
}

PhraseElement PhraseElement() :
{
    PhraseElement element;
    Phrase subPhrase;
}
{
    (element = Word()
    |
    // Are we looking at an parameter list followed by a brace? (disambiguates a ( as a RecordLit or grouping)
    LOOKAHEAD([FunctionLitPrefix(FunctionLit.builder())] <L_BRACE>)
    element = FunctionLit()
    |
    // Are we looking at "( <word> :"? (disambiguates ( as a grouping)
    LOOKAHEAD(<L_PAREN> Word() <COLON> | <L_PAREN> <R_PAREN> )
    element = RecordLit()
    |
    (<L_PAREN> subPhrase = Phrase() <R_PAREN>)
     {element = ParsableExpression.fromPhrase(subPhrase);}
    |
    element = SimpleExpression()
    |
    element = PhraseSymbol()
    |
    // Are we looking at the beginning of an array? (disambiguates a [ as a Word)
    LOOKAHEAD({lookaheadUtil.isArrayLit()})
    element = ArrayLit()
    |
    element = LBracket(LookaheadUtil.BracketConsumer.SYMBOL)
    |
    element = RBracket(LookaheadUtil.BracketConsumer.SYMBOL))


    {return element;}
}

// list of one or more phrases, separated by commas
ParsableExpressionList PhraseList() :
{
    Phrase phrase;
    ParsableExpressionList phraseList = new ParsableExpressionList();
}
{
    phrase = Phrase()
    {phraseList.add(ParsableExpression.fromPhrase(phrase));
     phraseList.setFilePos(phrase.getFilePos());}

    (<COMMA> phrase = Phrase()
     {phraseList.add(ParsableExpression.fromPhrase(phrase));}
    )*
    {return phraseList;}
}

// A single phrase followed by a comma, or multiple comma separated expressions
ParsableExpressionList EnforcedPhraseList() :
{
    Phrase head;
    ParsableExpressionList tail = null;
    ParsableExpressionList phraseList = new ParsableExpressionList();
}
{
    head = Phrase()
    {phraseList.add(ParsableExpression.fromPhrase(head));}
    <COMMA>
    // An Bracket here means the array is 1 element
    (LOOKAHEAD(<R_BRACKET>)
    {}
    |
    tail = PhraseList()
    {phraseList.addAll(tail);})
    {return phraseList;}
}

// A simple expression is one that requires no special look ahead rules
// in a PhraseElement. This exludes ArrayLit, RecordLit, FuncLit
Expression SimpleExpression() :
{
    Expression exp;
}
{
    (exp = ProgCall()
    |
    exp = SimpleLiteral()
    )
    {return exp;}
}

ProgCall ProgCall() :
{
    Token t;
    Word name;
    // Will be overwritten if there are subexpressions
    ParsableExpressionList subPhrases = new ParsableExpressionList();
}
{
    t = <AT>
    name = Word()
    <L_PAREN>
    [subPhrases = PhraseList()]
    <R_PAREN>
    {return ProgCallFactory.from(t, name, subPhrases);}
}

Literal SimpleLiteral() :
{
    Literal lit;
}
{
    (lit = PrimitiveLiteral()
    |
    lit = TypeLit()
    )
    {return lit;}
}

Literal PrimitiveLiteral() :
{
    Literal lit;
}
{
    (lit = IntLit()
    |
    lit = StringLit()
    |
    lit = BoolLit())
    {return lit;}
}

StringLit StringLit() :
{
    Token t;
}
{
    (t = <DOUBLE_QUOTED_STRING>
    |
    t = <SINGLE_QUOTED_STRING>)
    {return StringLitFactory.fromToken(t);}
}

IntLit IntLit() :
{
    Token t;
}
{
    (t = <DECIMAL_LIT>
    |
    t = <DOZENAL_LIT>)
    {return IntLitFactory.fromToken(t);}
}

BoolLit BoolLit() :
{
    Token t;
}
{
    (t = <TRUE>
    |
    t = <FALSE>)
    {return BoolLitFactory.fromToken(t);}
}

TypeLit TypeLit() :
{
    TypeLit t;
}
{
    (t = SimpleTypeLit()
    |
    t = CompoundTypeLit())
    {return t;}
}

TypeLit SimpleTypeLit() :
{
    Token t;
}
{
    (t = <TYPE>
    |
    t = <INT>
    |
    t = <STRING>
    |
    t = <BOOL>)
    {return TypeLitFactory.fromToken(t);}
}

TypeLit CompoundTypeLit() :
{
    TypeLit t;
}
{
    (t = ArrayTypeLit()
    |
    t = RecordTypeLit()
    |
    t = FuncTypeLit())
    {return t;}
}

// func{} func{->}
// func{A} func{A->}
// func{->B}
// func{A->B}
FuncTypeLit FuncTypeLit() :
{
    Token t;
    TypeLit inputType = null;
    TypeLit outputType = null;
}
{
    t = <FUNC>
    <L_BRACE>
    (
        (<R_BRACE>)
        |
        (<ARROW> [outputType = TypeLit()] <R_BRACE> )
        |
        (inputType = TypeLit() (<R_BRACE> | <ARROW> [outputType = TypeLit()] <R_BRACE> ))
    )
    {FuncTypeLit.Builder builder = FuncTypeLit.builder();
     if (outputType != null) builder.outputType(Optional.of(outputType));
     if (inputType != null) builder.inputType(inputType);
     return builder.buildWith(FilePos.from(t));}
}

ArrayTypeLit ArrayTypeLit() :
{
    Token identifier;
    TypeLit subType;
}
{
    (identifier = <ARRAY>)
    <L_PAREN>
    (subType = TypeLit())
    <R_PAREN>
    {ArrayTypeLit arrayTypeLit = ArrayTypeLit.builder()
        .subType(subType)
        .build();
     arrayTypeLit.setFilePos(FilePos.from(identifier));
     return arrayTypeLit;}
}

RecordTypeLit RecordTypeLit() :
{
    Token identifier;
    NameTypeLitPairList nameTypeLitPairs = new NameTypeLitPairList(); // overwrite this if there is a non-empty list
}
{
    identifier = <RECORD>
    <L_PAREN>
    [nameTypeLitPairs = NameTypeLitPairList()]
    <R_PAREN>
    {RecordTypeLit recordTypeLit = RecordTypeLit.builder()
        .nameTypeLitPairs(nameTypeLitPairs)
        .build();
     recordTypeLit.setFilePos(FilePos.from(identifier));
     return recordTypeLit;}
}

NameTypeLitPair NameTypeLitPair() :
{
    Word name;
    TypeLit type;
}
{
    name = Word()
    <COLON>
    type = TypeLit()
    {NameTypeLitPair nameTypeLitPair = NameTypeLitPair.builder()
        .name(name.getValue())
        .type(type)
        .build();
     nameTypeLitPair.setFilePos(name.getFilePos());
     return nameTypeLitPair;}
}

// A non-empty list of name type pairs separated by commas
// A single pair has no comma
// <WORD> : TypeLit(), ...
NameTypeLitPairList NameTypeLitPairList() :
{
    NameTypeLitPair nameTypeLitPair;
    NameTypeLitPairList nameTypeLitPairList = new NameTypeLitPairList();
}
{
    nameTypeLitPair = NameTypeLitPair()
    {nameTypeLitPairList.add(nameTypeLitPair);
     nameTypeLitPairList.setFilePos(nameTypeLitPair.getFilePos());}

    (<COMMA> nameTypeLitPair = NameTypeLitPair()
     {nameTypeLitPairList.add(nameTypeLitPair);}
    )*
    {return nameTypeLitPairList;}
}

NameParsableExpressionPair NamePhrasePair() :
{
    Word name;
    Phrase phrase;
}
{
    name = Word()
    <COLON>
    phrase = Phrase()
    {return NameParsableExpressionPair.builder()
        .name(name.getValue())
        .expression(ParsableExpression.fromPhrase(phrase))
        .buildWith(name.getFilePos());}
}

NameParsableExpressionPairList NamePhrasePairList() :
{
    NameParsableExpressionPair namePhrasePair;
    NameParsableExpressionPairList namePhrasePairList = new NameParsableExpressionPairList();
}
{
    namePhrasePair = NamePhrasePair()
    {namePhrasePairList.add(namePhrasePair);
     namePhrasePairList.setFilePos(namePhrasePair.getFilePos());}

    (<COMMA> namePhrasePair = NamePhrasePair()
     {namePhrasePairList.add(namePhrasePair);}
    )*
    {return namePhrasePairList;}
}

ArrayLit ArrayLit() :
{
    Word t;
    ParsableExpressionList expressions = new ParsableExpressionList();
}
{
    t = LBracket(LookaheadUtil.BracketConsumer.ARRAY_LIT)
    (LOOKAHEAD(<R_BRACKET>)
    {}
    |
    expressions = EnforcedPhraseList())
    RBracket(LookaheadUtil.BracketConsumer.ARRAY_LIT)
    {return ArrayLit.builder()
                .values(expressions)
                .buildWith(t.getFilePos());}
}

RecordLit RecordLit() :
{
    Token t;
    NameParsableExpressionPairList namePhrasePairs = new NameParsableExpressionPairList();
}
{
    t = <L_PAREN>
    [namePhrasePairs = NamePhrasePairList()]
    <R_PAREN>
    {return RecordLit.builder()
        .nameParsableExpressionPairs(namePhrasePairs)
        .buildWith(FilePos.from(t));}
}

// Match the prefix of a function, up to (not including) the L_BRACE ('{')
// add input and output types to the builder as found
void FunctionLitPrefix(FunctionLit.Builder builder) :
{
    Token t;
    NameTypeLitPairList inputTypes;
    TypeLit outputType;
}
{
    t = <L_PAREN>
    [inputTypes = NameTypeLitPairList()
    {builder.input(RecordTypeLit.builder()
                .nameTypeLitPairs(inputTypes)
                .buildWith(FilePos.from(t)));}]
    <R_PAREN>

    [
        <ARROW>
        outputType = TypeLit()
        {builder.output(Optional.of(outputType));}
    ]
}

// Match the (non-empty) body of the function, that is
// everything between (not including) the braces
void FunctionLitBody(FunctionLit.Builder builder) :
{
    Phrase firstExpression;
    Statement statement;
    StatementList statements = new StatementList();
}
{
    // A return expression
    firstExpression = Phrase()
    {builder.returnExpression(Optional.of(ParsableExpression.fromPhrase(firstExpression)));}

    [
        <SEMI_COLON> // if there is a semi-colon, this means that the expression was actually a statement
        {builder.returnExpression(Optional.empty());
         statements.add(StatementFactory.fromPhrase(firstExpression));}

        (statement = Statement()
         {statements.add(statement);})*

        {builder.statements(Optional.of(statements));}
    ]
}

FunctionLit FunctionLit() :
{
    Token t;
    FunctionLit.Builder builder = FunctionLit.builder();
}
{
    // Optional input/output type
    [FunctionLitPrefix(builder)]
    t = <L_BRACE>
    // Optional body
    [FunctionLitBody(builder)]
    <R_BRACE>
    {return builder.buildWith(FilePos.from(t));}
}

PatternDefinition PatternDef() :
{
    Token t;
    WordList syntax;
    FunctionLit semantics;
    PatternDefinition.Builder builder = PatternDefinition.builder();
}
{
    t = <DOLLAR>
    syntax = PatternWordSymbolList()
    {builder.syntax(syntax);}
    <DOLLAR>
    semantics = FunctionLit()
    {return PatternDefinition.builder()
    .syntax(syntax)
    .semantics(semantics)
    .buildWith(FilePos.from(t));}
}