
options {
    DEBUG_PARSER = false;
    DEBUG_TOKEN_MANAGER = false;

    STATIC = false;
}

PARSER_BEGIN(SymantaxParser)
package com.semantax.parser.generated;

import java.util.Optional;

import com.semantax.ast.factory.*;
import com.semantax.ast.node.*;
import com.semantax.ast.node.list.*;
import com.semantax.ast.node.literal.*;
import com.semantax.ast.node.literal.type.*;
import com.semantax.ast.util.FilePos;

public class SymantaxParser {}

PARSER_END(SymantaxParser)

SKIP: {
    " " | "\t " | "\n" | "\r"
}

// symbols
TOKEN : {
    < AT: "@" >
    |
    < DOLLAR: "$" >
    |
    < L_PAREN: "(" >
    |
    < R_PAREN: ")" >
    |
    < L_BRACE: "{" >
    |
    < R_BRACE: "}" >
    |
    < L_BRACKET: "[" >
    |
    < R_BRACKET: "]" >
    |
    < SEMI_COLON: ";" >
    |
    < COLON: ":" >
    |
    < DOUBLE_QUOTE: "\"" >
    |
    < SINGLE_QUOTE: "'" >
    |
    < COMMA: "," >
    |
    < ARROW: "->" >
    |
    < SYMBOL: ["!","#","%","&","*","+","-",".","/","<"-"?","^","-","`","|","~"] > // Symbols other than ' " , $ ( ) { } [ ] :
}

// type literals
TOKEN: {
    < TYPE: "type" >
    |
    < INT: "int" >
    |
    < STRING: "string" >
    |
    < BOOL: "bool" >
    |
    < ARRAY: "array" >
    |
    < RECORD: "record" >
    |
    < FUNC: "func" >
}

// keywords
TOKEN: {
    < MODULE: "module" >
    |
    < MODULE_MODIFIER: "public" | "main" >
    |
    < USES: "uses" >
}

// int literals
TOKEN: {
    < DECIMAL_LIT: (["0"-"9"])+ >
    |
    < DOZENAL_LIT: "0d" (["0"-"9", "x", "X", "e", "E"])+ >
}

// bool literals
TOKEN: {
    < TRUE: "true" >
    |
    < FALSE: "false" >
}

// string literals
TOKEN: {
    // A string lit is any escaped character, or anything other than a " or \
    <DOUBLE_QUOTED_STRING: "\"" ("\\" ~[] | ~["\"", "\\"])* "\"" >
    |
    <SINGLE_QUOTED_STRING: "'" ("\\" ~[] | ~["'", "\\"])* "'" >
}


// word
TOKEN: {
    < WORD: <LETTER> (<LETTER> | <DIGIT>)* >
    |
    < #LETTER: ["a"-"z", "A"-"Z"] >
    |
    < #DIGIT: ["0"-"9"] >
}


/** Root production. */
Program Program() :
{
    Module module;
    ModuleList modules = new ModuleList();
}
{
  (module = ModuleDefinition()
    {modules.add(module);}
  )* <EOF>
  {return new Program(modules);}
}

Module ModuleDefinition() :
{
    Token t;
    Word moduleName;
    WordList uses;
    Module subModule;
    ModuleList subModules = new ModuleList();
    Statement statement;
    StatementList statements = new StatementList();
    Module.Builder moduleBuilder = Module.builder();
}
{
    [t = <MODULE_MODIFIER>
     {moduleBuilder.modifier(t.image);}
    ]
    <MODULE>
    moduleName = Word()
    {moduleBuilder.name(moduleName.getValue());}
    [uses = UsesClause()
     {moduleBuilder.modulesUsed(uses);}
    ]
    <L_BRACE>
    (subModule = ModuleDefinition()
     {subModules.add(subModule);}
     |
     statement = Statement()
     {statements.add(statement);}
    )*
    {moduleBuilder.subModules(subModules);
     moduleBuilder.statements(statements);}
    <R_BRACE>
    {Module module = moduleBuilder.build();
     module.setFilePos(moduleName.getFilePos());
     return module;}
}

WordList UsesClause() :
{
    WordList wordList;
}
{
    <USES>
    wordList = WordList()
    {return wordList;}
}

WordList WordList() :
{
    Word word;
    WordList words = new WordList();
}
{
    word = Word()
    {words.add(word);
     words.setFilePos(word.getFilePos());}
    (<COMMA> word = Word()
     {words.add(word);}
    )*
    {return words;}
}

Word Word() :
{
    Token t;
}
{
    t = <WORD>
    {return WordFactory.fromToken(t);}
}

Word Symbol() :
{
    Token t;
}
{
    // [] and : are not included in the symbol token, since they are tokens in thier own right
    t = <SYMBOL>
    {return Word.fromToken(t);}
}

Statement Statement() :
{
    Phrase phrase;
}
{
    phrase = Phrase() <SEMI_COLON>
    {return Statement.builder()
        .phrase(phrase)
        .buildWith(phrase.getFilePos());}
}

Phrase Phrase() :
{
    PhraseElement element;
    Phrase.Builder builder = Phrase.builder();
}
{
    (element = PhraseElement()
     {builder.element(element);})+
    {return builder.build();}
}

PhraseElement PhraseElement() :
{
    PhraseElement element;
}
{
    (element = Word()
    |
    element = Symbol()
    |
    LOOKAHEAD(3) // resolves conflict with parenthesized phrase - this picks a record literal if there is a colon
    element = Expression()
    |
    (<L_PAREN> element = Phrase() <R_PAREN>) )
    {return element;}
}

ExpressionList PhraseList() :
{
    Phrase phrase;
    ExpressionList phraseList = new ExpressionList();
}
{
    phrase = Phrase()
    {phraseList.add(phrase);
     phraseList.setFilePos(phrase.getFilePos());}

    (<COMMA> phrase = Phrase()
     {phraseList.add(phrase);}
    )*
    {return phraseList;}
}

// A single phrase followed by a comma, or multiple comma separated expressions
ExpressionList EnforcedPhraseList() :
{
    Phrase head;
    ExpressionList tail = null;
    ExpressionList phraseList = new ExpressionList();
}
{
    head = Phrase()
    {phraseList.add(head);}
    <COMMA>
    [tail = PhraseList()
    {phraseList.addAll(tail);}]
    {return phraseList;}
}

Expression Expression() :
{
    Expression exp;
}
{
    (exp = ProgCall()
    |
    exp = Literal()
    )
    {return exp;}
}

ProgCall ProgCall() :
{
    Word name;
    ExpressionList subPhrases;
    ProgCall.Builder builder = ProgCall.builder();
}
{
    <AT>
    name = Word()
    {builder.name(name.getValue());}
    <L_PAREN>
    [subPhrases = PhraseList()
     {builder.subExpressions(subPhrases);}
    ]
    <R_PAREN>
    {ProgCall progCall = builder.build();
     progCall.setFilePos(name.getFilePos());
     return progCall;}
}

Literal Literal() :
{
    Literal lit;
}
{
    (lit = PrimitiveLiteral()
    |
    lit = CompoundLiteral()
    |
    lit = TypeLit()
    )
    {return lit;}
}

Literal PrimitiveLiteral() :
{
    Literal lit;
}
{
    (lit = IntLit()
    |
    lit = StringLit()
    |
    lit = BoolLit())
    {return lit;}
}

StringLit StringLit() :
{
    Token t;
}
{
    (t = <DOUBLE_QUOTED_STRING>
    |
    t = <SINGLE_QUOTED_STRING>)
    {return StringLitFactory.fromToken(t);}
}

IntLit IntLit() :
{
    Token t;
}
{
    (t = <DECIMAL_LIT>
    |
    t = <DOZENAL_LIT>)
    {return IntLitFactory.fromToken(t);}
}

BoolLit BoolLit() :
{
    Token t;
}
{
    (t = <TRUE>
    |
    t = <FALSE>)
    {return BoolLitFactory.fromToken(t);}
}

TypeLit TypeLit() :
{
    TypeLit t;
}
{
    (t = SimpleTypeLit()
    |
    t = CompoundTypeLit())
    {return t;}
}

TypeLit SimpleTypeLit() :
{
    Token t;
}
{
    (t = <TYPE>
    |
    t = <INT>
    |
    t = <STRING>
    |
    t = <BOOL>)
    {return TypeLitFactory.fromToken(t);}
}

TypeLit CompoundTypeLit() :
{
    TypeLit t;
}
{
    (t = ArrayTypeLit()
    |
    t = RecordTypeLit()
    |
    t = FuncTypeLit())
    {return t;}
}

// func{} func{->}
// func{A} func{A->}
// func{->B}
// func{A->B}
FuncTypeLit FuncTypeLit() :
{
    Token t;
    TypeLit inputType = null;
    TypeLit outputType = null;
}
{
    t = <FUNC>
    <L_BRACE>
    (
        (<R_BRACE>)
        |
        (<ARROW> [outputType = TypeLit()] <R_BRACE> )
        |
        (inputType = TypeLit() (<R_BRACE> | <ARROW> [outputType = TypeLit()] <R_BRACE> ))
    )
    {FuncTypeLit.Builder builder = FuncTypeLit.builder();
     if (outputType != null) builder.outputType(outputType);
     if (inputType != null) builder.inputType(inputType);
     return builder.buildWith(FilePos.from(t));}
}

ArrayTypeLit ArrayTypeLit() :
{
    Token identifier;
    TypeLit subType;
}
{
    (identifier = <ARRAY>)
    <L_PAREN>
    (subType = TypeLit())
    <R_PAREN>
    {ArrayTypeLit arrayTypeLit = ArrayTypeLit.builder()
        .subType(subType)
        .build();
     arrayTypeLit.setFilePos(FilePos.from(identifier));
     return arrayTypeLit;}
}

RecordTypeLit RecordTypeLit() :
{
    Token identifier;
    NameTypePairList nameTypePairs = new NameTypePairList(); // overwrite this if there is a non-empty list
}
{
    identifier = <RECORD>
    <L_PAREN>
    [nameTypePairs = NameTypePairList()]
    <R_PAREN>
    {RecordTypeLit recordTypeLit = RecordTypeLit.builder()
        .nameTypePairs(nameTypePairs)
        .build();
     recordTypeLit.setFilePos(FilePos.from(identifier));
     return recordTypeLit;}
}

NameTypePair NameTypePair() :
{
    Word name;
    TypeLit type;
}
{
    name = Word()
    <COLON>
    type = TypeLit()
    {NameTypePair nameTypePair = NameTypePair.builder()
        .name(name.getValue())
        .type(type)
        .build();
     nameTypePair.setFilePos(name.getFilePos());
     return nameTypePair;}
}

// A non-empty list of name type pairs separated by commas
// A single pair has no comma
// <WORD> : TypeLit(), ...
NameTypePairList NameTypePairList() :
{
    NameTypePair nameTypePair;
    NameTypePairList nameTypePairList = new NameTypePairList();
}
{
    nameTypePair = NameTypePair()
    {nameTypePairList.add(nameTypePair);
     nameTypePairList.setFilePos(nameTypePair.getFilePos());}

    (<COMMA> nameTypePair = NameTypePair()
     {nameTypePairList.add(nameTypePair);}
    )*
    {return nameTypePairList;}
}

NameExpressionPair NamePhrasePair() :
{
    Word name;
    Expression phrase;
}
{
    name = Word()
    <COLON>
    phrase = Phrase()
    {return NameExpressionPair.builder()
        .name(name.getValue())
        .expression(phrase)
        .buildWith(name.getFilePos());}
}

NameExpressionPairList NamePhrasePairList() :
{
    NameExpressionPair namePhrasePair;
    NameExpressionPairList namePhrasePairList = new NameExpressionPairList();
}
{
    namePhrasePair = NamePhrasePair()
    {namePhrasePairList.add(namePhrasePair);
     namePhrasePairList.setFilePos(namePhrasePair.getFilePos());}

    (<COMMA> namePhrasePair = NamePhrasePair()
     {namePhrasePairList.add(namePhrasePair);}
    )*
    {return namePhrasePairList;}
}

Literal CompoundLiteral() :
{
    Literal lit;
}
{
    (lit = ArrayLit()
    |
    LOOKAHEAD([FunctionLitPrefix(FunctionLit.builder())] <L_BRACE>)
    lit = FunctionLit()
    |
    lit = RecordLit()
     )
    {return lit;}
}

ArrayLit ArrayLit() :
{
    Token t;
    ExpressionList expressions = new ExpressionList();
}
{
    t = <L_BRACKET>
    [expressions = EnforcedPhraseList()]
    <R_BRACKET>
    {return ArrayLit.builder()
                .values(expressions)
                .buildWith(FilePos.from(t));}
}

RecordLit RecordLit() :
{
    Token t;
    NameExpressionPairList namePhrasePairs = new NameExpressionPairList();
}
{
    t = <L_PAREN>
    [namePhrasePairs = NamePhrasePairList()]
    <R_PAREN>
    {return RecordLit.builder()
        .nameExpressionPairs(namePhrasePairs)
        .buildWith(FilePos.from(t));}
}

// Match the prefix of a function, up to (not including) the L_BRACE ('{')
// add input and output types to the builder as found
void FunctionLitPrefix(FunctionLit.Builder builder) :
{
    Token t;
    NameTypePairList inputTypes;
    TypeLit outputType;
}
{
    t = <L_PAREN>
    [inputTypes = NameTypePairList()
    {builder.input(RecordTypeLit.builder()
                .nameTypePairs(inputTypes)
                .buildWith(FilePos.from(t)));}]
    <R_PAREN>

    [
        <ARROW>
        outputType = TypeLit()
        {builder.output(Optional.of(outputType));}
    ]
}

// Match the (non-empty) body of the function, that is
// everything between (not including) the braces
void FunctionLitBody(FunctionLit.Builder builder) :
{
    Expression firstExpression;
    Statement statement;
    StatementList statements = new StatementList();
}
{
    // A return expression
    firstExpression = Expression()
    {builder.returnExpression(Optional.of(firstExpression));}

    [
        <SEMI_COLON> // if there is a semi-colon, this means that the expression was actually a statement
        {builder.returnExpression(Optional.empty());
         statements.add(StatementFactory.fromExpression(firstExpression));}

        (statement = Statement()
         {statements.add(statement);})*

        {builder.statements(Optional.of(statements));}
    ]
}

// (){...}
//
FunctionLit FunctionLit() :
{
    Token t;
    FunctionLit.Builder builder = FunctionLit.builder();
}
{
    // Optional input/output type
    [FunctionLitPrefix(builder)]
    t = <L_BRACE>
    // Optional body
    [FunctionLitBody(builder)]
    <R_BRACE>
    {return builder.buildWith(FilePos.from(t));}
}

