/* Generated By:JavaCC: Do not edit this line. SymantaxParserConstants.java */
package com.symantax.parser.generated;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SymantaxParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int BACK_TICK = 5;
  /** RegularExpression Id. */
  int TILDE = 6;
  /** RegularExpression Id. */
  int BANG = 7;
  /** RegularExpression Id. */
  int AT = 8;
  /** RegularExpression Id. */
  int HASH = 9;
  /** RegularExpression Id. */
  int DOLLAR = 10;
  /** RegularExpression Id. */
  int PERCENT = 11;
  /** RegularExpression Id. */
  int CARET = 12;
  /** RegularExpression Id. */
  int AMPERSAND = 13;
  /** RegularExpression Id. */
  int STAR = 14;
  /** RegularExpression Id. */
  int DASH = 15;
  /** RegularExpression Id. */
  int PLUS = 16;
  /** RegularExpression Id. */
  int EQUALS = 17;
  /** RegularExpression Id. */
  int L_PAREN = 18;
  /** RegularExpression Id. */
  int R_PAREN = 19;
  /** RegularExpression Id. */
  int L_BRACE = 20;
  /** RegularExpression Id. */
  int R_BRACE = 21;
  /** RegularExpression Id. */
  int L_BRACKET = 22;
  /** RegularExpression Id. */
  int R_BRACKET = 23;
  /** RegularExpression Id. */
  int L_ANGLE = 24;
  /** RegularExpression Id. */
  int R_ANGLE = 25;
  /** RegularExpression Id. */
  int SEMI_COLON = 26;
  /** RegularExpression Id. */
  int COLON = 27;
  /** RegularExpression Id. */
  int DOUBLE_QUOTE = 28;
  /** RegularExpression Id. */
  int SINGLE_QUOTE = 29;
  /** RegularExpression Id. */
  int COMMA = 30;
  /** RegularExpression Id. */
  int DOT = 31;
  /** RegularExpression Id. */
  int TYPE = 32;
  /** RegularExpression Id. */
  int INT = 33;
  /** RegularExpression Id. */
  int STRING = 34;
  /** RegularExpression Id. */
  int BOOL = 35;
  /** RegularExpression Id. */
  int MODULE = 36;
  /** RegularExpression Id. */
  int MODULE_MODIFIER = 37;
  /** RegularExpression Id. */
  int USES = 38;
  /** RegularExpression Id. */
  int DECIMAL_LIT = 39;
  /** RegularExpression Id. */
  int DOZENAL_LIT = 40;
  /** RegularExpression Id. */
  int TRUE = 41;
  /** RegularExpression Id. */
  int FALSE = 42;
  /** RegularExpression Id. */
  int DOUBLE_QUOTED_STRING = 43;
  /** RegularExpression Id. */
  int SINGLE_QUOTED_STRING = 44;
  /** RegularExpression Id. */
  int WORD = 45;
  /** RegularExpression Id. */
  int LETTER = 46;
  /** RegularExpression Id. */
  int DIGIT = 47;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"`\"",
    "\"~\"",
    "\"!\"",
    "\"@\"",
    "\"#\"",
    "\"$\"",
    "\"%\"",
    "\"^\"",
    "\"&\"",
    "\"*\"",
    "\"-\"",
    "\"+\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"<\"",
    "\">\"",
    "\";\"",
    "\":\"",
    "\"\\\"\"",
    "\"\\\'\"",
    "\",\"",
    "\".\"",
    "\"type\"",
    "\"int\"",
    "\"string\"",
    "\"bool\"",
    "\"module\"",
    "<MODULE_MODIFIER>",
    "\"uses\"",
    "<DECIMAL_LIT>",
    "<DOZENAL_LIT>",
    "\"true\"",
    "\"false\"",
    "<DOUBLE_QUOTED_STRING>",
    "<SINGLE_QUOTED_STRING>",
    "<WORD>",
    "<LETTER>",
    "<DIGIT>",
  };

}
