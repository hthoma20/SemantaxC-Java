/* Generated By:JavaCC: Do not edit this line. SymantaxParser.java */
package com.symantax.parser.generated;

import com.symantax.ast.factory.*;
import com.symantax.ast.node.*;
import com.symantax.ast.node.list.*;
import com.symantax.ast.node.literal.*;
import com.symantax.ast.node.literal.type.*;

public class SymantaxParser implements SymantaxParserConstants {

/** Root production. */
  final public Program Program() throws ParseException {
    Module module;
    ModuleList modules = new ModuleList();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODULE:
      case MODULE_MODIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      module = ModuleDefinition();
     modules.add(module);
    }
    jj_consume_token(0);
   {if (true) return new Program(modules);}
    throw new Error("Missing return statement in function");
  }

  final public Module ModuleDefinition() throws ParseException {
    Token t;
    Word moduleName;
    WordList uses;
    Module subModule;
    ModuleList subModules = new ModuleList();
    Statement statement;
    StatementList statements = new StatementList();
    Module.ModuleBuilder moduleBuilder = Module.builder();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE_MODIFIER:
      t = jj_consume_token(MODULE_MODIFIER);
      moduleBuilder.modifier(t.image);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(MODULE);
    moduleName = Word();
     moduleBuilder.name(moduleName.getValue());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case USES:
      uses = UsesClause();
      moduleBuilder.modulesUsed(uses);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(L_BRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
      case L_PAREN:
      case TYPE:
      case INT:
      case STRING:
      case BOOL:
      case MODULE:
      case MODULE_MODIFIER:
      case DECIMAL_LIT:
      case DOZENAL_LIT:
      case TRUE:
      case FALSE:
      case DOUBLE_QUOTED_STRING:
      case SINGLE_QUOTED_STRING:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODULE:
      case MODULE_MODIFIER:
        subModule = ModuleDefinition();
      subModules.add(subModule);
        break;
      case AT:
      case L_PAREN:
      case TYPE:
      case INT:
      case STRING:
      case BOOL:
      case DECIMAL_LIT:
      case DOZENAL_LIT:
      case TRUE:
      case FALSE:
      case DOUBLE_QUOTED_STRING:
      case SINGLE_QUOTED_STRING:
        statement = Statement();
      statements.add(statement);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     moduleBuilder.subModules(subModules);
     moduleBuilder.statements(statements);
    jj_consume_token(R_BRACE);
     Module module = moduleBuilder.build();
     module.setFilePos(moduleName.getFilePos());
     {if (true) return module;}
    throw new Error("Missing return statement in function");
  }

  final public WordList UsesClause() throws ParseException {
    WordList wordList;
    jj_consume_token(USES);
    wordList = WordList();
     {if (true) return wordList;}
    throw new Error("Missing return statement in function");
  }

  final public WordList WordList() throws ParseException {
    Word word;
    WordList words = new WordList();
    word = Word();
     words.add(word);
     words.setFilePos(word.getFilePos());
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      word = Word();
      words.add(word);
    }
     {if (true) return words;}
    throw new Error("Missing return statement in function");
  }

  final public Word Word() throws ParseException {
    Token t;
    t = jj_consume_token(WORD);
     {if (true) return WordFactory.fromToken(t);}
    throw new Error("Missing return statement in function");
  }

  final public void Symbol() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case EQUALS:
      jj_consume_token(EQUALS);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Statement Statement() throws ParseException {
    Expression exp;
    exp = Expression();
    jj_consume_token(SEMI_COLON);
     Statement statement = Statement.builder().expression(exp).build();
     statement.setFilePos(exp.getFilePos());
     {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionList ExpressionList() throws ParseException {
    Expression exp;
    ExpressionList expressionList = new ExpressionList();
    exp = Expression();
     expressionList.add(exp);
     expressionList.setFilePos(exp.getFilePos());
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      exp = Expression();
      expressionList.add(exp);
    }
     {if (true) return expressionList;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression() throws ParseException {
    Expression exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_LIT:
    case DOZENAL_LIT:
      exp = IntLit();
      break;
    case DOUBLE_QUOTED_STRING:
    case SINGLE_QUOTED_STRING:
      exp = StringLit();
      break;
    case TRUE:
    case FALSE:
      exp = BoolLit();
      break;
    case AT:
      exp = ProgCall();
      break;
    case L_PAREN:
      exp = EmptyRecord();
      break;
    case TYPE:
    case INT:
    case STRING:
    case BOOL:
      exp = TypeLit();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public ProgCall ProgCall() throws ParseException {
    Word name;
    ExpressionList subExpressions;
    ProgCall.ProgCallBuilder builder = ProgCall.builder();
    jj_consume_token(AT);
    name = Word();
     builder.name(name.getValue());
    jj_consume_token(L_PAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
    case L_PAREN:
    case TYPE:
    case INT:
    case STRING:
    case BOOL:
    case DECIMAL_LIT:
    case DOZENAL_LIT:
    case TRUE:
    case FALSE:
    case DOUBLE_QUOTED_STRING:
    case SINGLE_QUOTED_STRING:
      subExpressions = ExpressionList();
      builder.subExpressions(subExpressions);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(R_PAREN);
     ProgCall progCall = builder.build();
     progCall.setFilePos(name.getFilePos());
     {if (true) return progCall;}
    throw new Error("Missing return statement in function");
  }

  final public StringLit StringLit() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLE_QUOTED_STRING:
      t = jj_consume_token(DOUBLE_QUOTED_STRING);
      break;
    case SINGLE_QUOTED_STRING:
      t = jj_consume_token(SINGLE_QUOTED_STRING);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return StringLitFactory.fromToken(t);}
    throw new Error("Missing return statement in function");
  }

  final public IntLit IntLit() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_LIT:
      t = jj_consume_token(DECIMAL_LIT);
      break;
    case DOZENAL_LIT:
      t = jj_consume_token(DOZENAL_LIT);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return IntLitFactory.fromToken(t);}
    throw new Error("Missing return statement in function");
  }

  final public BoolLit BoolLit() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return BoolLitFactory.fromToken(t);}
    throw new Error("Missing return statement in function");
  }

  final public TypeLit TypeLit() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
      t = jj_consume_token(TYPE);
      break;
    case INT:
      t = jj_consume_token(INT);
      break;
    case STRING:
      t = jj_consume_token(STRING);
      break;
    case BOOL:
      t = jj_consume_token(BOOL);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return TypeLitFactory.fromToken(t);}
    throw new Error("Missing return statement in function");
  }

  final public EmptyRecord EmptyRecord() throws ParseException {
    Token t;
    t = jj_consume_token(L_PAREN);
    jj_consume_token(R_PAREN);
     {if (true) return EmptyRecordFactory.fromToken(t);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SymantaxParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x40100,0x40100,0x40000000,0x30000,0x40000000,0x40100,0x40100,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x30,0x20,0x40,0x1fbf,0x1fbf,0x0,0x0,0x0,0x1f8f,0x1f8f,0x1800,0x180,0x600,0xf,};
   }

  /** Constructor with InputStream. */
  public SymantaxParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SymantaxParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SymantaxParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SymantaxParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SymantaxParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SymantaxParser(SymantaxParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SymantaxParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

                             }
